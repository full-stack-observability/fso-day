# For use on AWS we use a LoadBalancer to make the demo accessible from the outside
components:
  frontendProxy:
    service:
      type: LoadBalancer

default:
  envOverrides:
    # We report directly into the cluster-internal AppD Cloud OTel collector
    - name: OTEL_COLLECTOR_NAME
      value: appdynamics-otel-collector-service.appdynamics.svc.cluster.local
    # We override service.namespace to be the same as our k8s namespace, the original demo hardcodes it to opentelemetry-demo
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=$(OTEL_K8S_NAMESPACE),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)

# The following services are not needed in our demo
opentelemetry-collector:
  enabled: false

jaeger:
  enabled: false

prometheus:
  enabled: false

grafana:
  enabled: false 